// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TrackingService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::imi;

class TrackingServiceHandler : virtual public TrackingServiceIf {
 public:
  TrackingServiceHandler() {
    // Your initialization goes here
  }

  void objectMovedDelta(const std::string& sensorID, const  ::imi::Microseconds timestamp, const  ::imi::ObjectName& movingObject, const  ::imi::Vec3& positionChange, const  ::imi::Vec4& orientationChange, const  ::imi::Microseconds motionDuration) {
    // Your implementation goes here
    printf("objectMovedDelta\n");
  }

  void objectMoved(const std::string& sensorID, const  ::imi::Microseconds timestamp, const  ::imi::ObjectName& movingObject, const  ::imi::Vec3& position, const  ::imi::Vec4& orientation) {
    // Your implementation goes here
    printf("objectMoved\n");
  }

};
/*
int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<TrackingServiceHandler> handler(new TrackingServiceHandler());
  shared_ptr<TProcessor> processor(new TrackingServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
*/
