/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TrackingService_H
#define TrackingService_H

#include <thrift/TDispatchProcessor.h>
#include "Inputs_types.h"

namespace imi {

class TrackingServiceIf {
 public:
  virtual ~TrackingServiceIf() {}
  virtual void objectMovedDelta(const std::string& sensorID, const  ::imi::Microseconds timestamp, const  ::imi::ObjectName& movingObject, const  ::imi::Vec3& positionChange, const  ::imi::Vec4& orientationChange, const  ::imi::Microseconds motionDuration) = 0;
  virtual void objectMoved(const std::string& sensorID, const  ::imi::Microseconds timestamp, const  ::imi::ObjectName& movingObject, const  ::imi::Vec3& position, const  ::imi::Vec4& orientation) = 0;
};

class TrackingServiceIfFactory {
 public:
  typedef TrackingServiceIf Handler;

  virtual ~TrackingServiceIfFactory() {}

  virtual TrackingServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TrackingServiceIf* /* handler */) = 0;
};

class TrackingServiceIfSingletonFactory : virtual public TrackingServiceIfFactory {
 public:
  TrackingServiceIfSingletonFactory(const boost::shared_ptr<TrackingServiceIf>& iface) : iface_(iface) {}
  virtual ~TrackingServiceIfSingletonFactory() {}

  virtual TrackingServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TrackingServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TrackingServiceIf> iface_;
};

class TrackingServiceNull : virtual public TrackingServiceIf {
 public:
  virtual ~TrackingServiceNull() {}
  void objectMovedDelta(const std::string& /* sensorID */, const  ::imi::Microseconds /* timestamp */, const  ::imi::ObjectName& /* movingObject */, const  ::imi::Vec3& /* positionChange */, const  ::imi::Vec4& /* orientationChange */, const  ::imi::Microseconds /* motionDuration */) {
    return;
  }
  void objectMoved(const std::string& /* sensorID */, const  ::imi::Microseconds /* timestamp */, const  ::imi::ObjectName& /* movingObject */, const  ::imi::Vec3& /* position */, const  ::imi::Vec4& /* orientation */) {
    return;
  }
};

typedef struct _TrackingService_objectMovedDelta_args__isset {
  _TrackingService_objectMovedDelta_args__isset() : sensorID(false), timestamp(false), movingObject(false), positionChange(false), orientationChange(false), motionDuration(false) {}
  bool sensorID;
  bool timestamp;
  bool movingObject;
  bool positionChange;
  bool orientationChange;
  bool motionDuration;
} _TrackingService_objectMovedDelta_args__isset;

class TrackingService_objectMovedDelta_args {
 public:

  TrackingService_objectMovedDelta_args() : sensorID(), timestamp(0), movingObject(), motionDuration(0) {
  }

  virtual ~TrackingService_objectMovedDelta_args() throw() {}

  std::string sensorID;
   ::imi::Microseconds timestamp;
   ::imi::ObjectName movingObject;
   ::imi::Vec3 positionChange;
   ::imi::Vec4 orientationChange;
   ::imi::Microseconds motionDuration;

  _TrackingService_objectMovedDelta_args__isset __isset;

  void __set_sensorID(const std::string& val) {
    sensorID = val;
  }

  void __set_timestamp(const  ::imi::Microseconds val) {
    timestamp = val;
  }

  void __set_movingObject(const  ::imi::ObjectName& val) {
    movingObject = val;
  }

  void __set_positionChange(const  ::imi::Vec3& val) {
    positionChange = val;
  }

  void __set_orientationChange(const  ::imi::Vec4& val) {
    orientationChange = val;
  }

  void __set_motionDuration(const  ::imi::Microseconds val) {
    motionDuration = val;
  }

  bool operator == (const TrackingService_objectMovedDelta_args & rhs) const
  {
    if (!(sensorID == rhs.sensorID))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(movingObject == rhs.movingObject))
      return false;
    if (!(positionChange == rhs.positionChange))
      return false;
    if (!(orientationChange == rhs.orientationChange))
      return false;
    if (!(motionDuration == rhs.motionDuration))
      return false;
    return true;
  }
  bool operator != (const TrackingService_objectMovedDelta_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TrackingService_objectMovedDelta_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TrackingService_objectMovedDelta_pargs {
 public:


  virtual ~TrackingService_objectMovedDelta_pargs() throw() {}

  const std::string* sensorID;
  const  ::imi::Microseconds* timestamp;
  const  ::imi::ObjectName* movingObject;
  const  ::imi::Vec3* positionChange;
  const  ::imi::Vec4* orientationChange;
  const  ::imi::Microseconds* motionDuration;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TrackingService_objectMoved_args__isset {
  _TrackingService_objectMoved_args__isset() : sensorID(false), timestamp(false), movingObject(false), position(false), orientation(false) {}
  bool sensorID;
  bool timestamp;
  bool movingObject;
  bool position;
  bool orientation;
} _TrackingService_objectMoved_args__isset;

class TrackingService_objectMoved_args {
 public:

  TrackingService_objectMoved_args() : sensorID(), timestamp(0), movingObject() {
  }

  virtual ~TrackingService_objectMoved_args() throw() {}

  std::string sensorID;
   ::imi::Microseconds timestamp;
   ::imi::ObjectName movingObject;
   ::imi::Vec3 position;
   ::imi::Vec4 orientation;

  _TrackingService_objectMoved_args__isset __isset;

  void __set_sensorID(const std::string& val) {
    sensorID = val;
  }

  void __set_timestamp(const  ::imi::Microseconds val) {
    timestamp = val;
  }

  void __set_movingObject(const  ::imi::ObjectName& val) {
    movingObject = val;
  }

  void __set_position(const  ::imi::Vec3& val) {
    position = val;
  }

  void __set_orientation(const  ::imi::Vec4& val) {
    orientation = val;
  }

  bool operator == (const TrackingService_objectMoved_args & rhs) const
  {
    if (!(sensorID == rhs.sensorID))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(movingObject == rhs.movingObject))
      return false;
    if (!(position == rhs.position))
      return false;
    if (!(orientation == rhs.orientation))
      return false;
    return true;
  }
  bool operator != (const TrackingService_objectMoved_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TrackingService_objectMoved_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TrackingService_objectMoved_pargs {
 public:


  virtual ~TrackingService_objectMoved_pargs() throw() {}

  const std::string* sensorID;
  const  ::imi::Microseconds* timestamp;
  const  ::imi::ObjectName* movingObject;
  const  ::imi::Vec3* position;
  const  ::imi::Vec4* orientation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class TrackingServiceClient : virtual public TrackingServiceIf {
 public:
  TrackingServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TrackingServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void objectMovedDelta(const std::string& sensorID, const  ::imi::Microseconds timestamp, const  ::imi::ObjectName& movingObject, const  ::imi::Vec3& positionChange, const  ::imi::Vec4& orientationChange, const  ::imi::Microseconds motionDuration);
  void send_objectMovedDelta(const std::string& sensorID, const  ::imi::Microseconds timestamp, const  ::imi::ObjectName& movingObject, const  ::imi::Vec3& positionChange, const  ::imi::Vec4& orientationChange, const  ::imi::Microseconds motionDuration);
  void objectMoved(const std::string& sensorID, const  ::imi::Microseconds timestamp, const  ::imi::ObjectName& movingObject, const  ::imi::Vec3& position, const  ::imi::Vec4& orientation);
  void send_objectMoved(const std::string& sensorID, const  ::imi::Microseconds timestamp, const  ::imi::ObjectName& movingObject, const  ::imi::Vec3& position, const  ::imi::Vec4& orientation);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TrackingServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TrackingServiceIf> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TrackingServiceProcessor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_objectMovedDelta(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_objectMoved(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TrackingServiceProcessor(boost::shared_ptr<TrackingServiceIf> iface) :
    iface_(iface) {
    processMap_["objectMovedDelta"] = &TrackingServiceProcessor::process_objectMovedDelta;
    processMap_["objectMoved"] = &TrackingServiceProcessor::process_objectMoved;
  }

  virtual ~TrackingServiceProcessor() {}
};

class TrackingServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TrackingServiceProcessorFactory(const ::boost::shared_ptr< TrackingServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TrackingServiceIfFactory > handlerFactory_;
};

class TrackingServiceMultiface : virtual public TrackingServiceIf {
 public:
  TrackingServiceMultiface(std::vector<boost::shared_ptr<TrackingServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TrackingServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TrackingServiceIf> > ifaces_;
  TrackingServiceMultiface() {}
  void add(boost::shared_ptr<TrackingServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void objectMovedDelta(const std::string& sensorID, const  ::imi::Microseconds timestamp, const  ::imi::ObjectName& movingObject, const  ::imi::Vec3& positionChange, const  ::imi::Vec4& orientationChange, const  ::imi::Microseconds motionDuration) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->objectMovedDelta(sensorID, timestamp, movingObject, positionChange, orientationChange, motionDuration);
    }
    ifaces_[i]->objectMovedDelta(sensorID, timestamp, movingObject, positionChange, orientationChange, motionDuration);
  }

  void objectMoved(const std::string& sensorID, const  ::imi::Microseconds timestamp, const  ::imi::ObjectName& movingObject, const  ::imi::Vec3& position, const  ::imi::Vec4& orientation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->objectMoved(sensorID, timestamp, movingObject, position, orientation);
    }
    ifaces_[i]->objectMoved(sensorID, timestamp, movingObject, position, orientation);
  }

};

} // namespace

#endif
